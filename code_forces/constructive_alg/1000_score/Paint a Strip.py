"""
https://codeforces.com/problemset/problem/2040/B
你有一个长度为 n 的数组[a1,a2,...an],初始值全部为 0
你可以对数组执行下面两种操作：
1. 选择一个下标满足 1 <= i <= n 且 ai = 0, 将此下标的值变换为 1
2. 选择一个范围满足 1 <= l <= r <= n, al = 1, ar = 1 同时 al + ... + ar >= ceil((r -l + 1) / 2),此时我们可以将 1,r之间的数全部变换为 1
求当数组全部变为 1 时，所需要操作 1的最少次数

分析：
n = 1时，采用一次 1 操作
n = 2时，采用两次 1 操作
n = 3时，对1,3采用两次 1 操作，然后用 2 操作覆盖中间
n = 4时，对1,4采用两次 1 操作，然后用 2 操作覆盖中间
第二次 1 操作最远可以放到哪里呢？4的位置，因为这样 1 和 4 都是 1，可以覆盖 2 和 3 的 0
第三次可以放在哪里呢？10的位置，因为这样 1-4和 10一共五个 1，可以覆盖 5-9中间的 0
规律如下: s为 1 的数量，n 为操作 1 次数
s = 1, n = 1
s = (1 + 1) * 2 = 4, n = 2
s = (4 + 1) * 2 = 10, n = 3
s = (10 + 1) * 2 = 22, n = 4
"""


def solution(n):
    s = cnt = 1
    while s < n:
        s = 2 * (s + 1)
        cnt += 1
    return cnt


def solve():
    n = int(input())
    for _ in range(n):
        print(solution(int(input())))


if __name__ == "__main__":
    solve()
